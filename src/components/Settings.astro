---
import { Icon } from "astro-icon/components"
import settingsData from "@/data/settings.json"
import Popup from "@/Popup.astro"

const flatSettingsConfig = settingsData.sections.flatMap(
  (section) => section.settings,
)
---

<Popup
  title="Settings"
  triggerAriaLabel="Settings"
  triggerIcon="ph:gear-six-bold"
  triggerId="omnibar-settings-btn"
  popupId="settings-popup"
  contentId="settings-popup-content"
  closeBtnId="close-settings-btn"
>
  <div class="space-y-6">
    {
      settingsData.sections.map((section) => (
        <section class="space-y-4 border-t border-overlay pt-4 first:pt-0 first:border-t-0">
          <h2 class="text-lg font-medium text-text">{section.title}</h2>
          {section.settings.map((setting) => (
            <div class="flex items-center justify-between gap-4">
              <div class="flex items-center gap-2">
                <label class="text-text" for={setting.id}>
                  {setting.label}
                </label>
                {setting.description && (
                  <button
                    class="info-btn text-text/60 hover:text-iris transition-colors"
                    aria-label={`More info about ${setting.label}`}
                    data-description={setting.description}
                  >
                    <Icon name="ph:info-bold" class="size-4" />
                  </button>
                )}
              </div>
              <div class="flex items-center">
                {setting.type === "select" && (
                  <select
                    id={setting.id}
                    class="bg-base text-text rounded-md p-1 border border-overlay focus:border-iris focus:outline-none"
                  >
                    {setting.options?.map((option) => (
                      <option disabled={option.disabled} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                )}
                {setting.type === "text" && (
                  <div class="flex flex-col"> {/* New wrapper for input + error */}
                    <input
                      type="text"
                      id={setting.id}
                      class="bg-base text-text rounded-md border p-1 border-overlay focus:border-iris focus:outline-none w-full sm:w-48"
                      placeholder={setting.placeholder || ""}
                      aria-invalid="false"
                      aria-describedby={`${setting.id}-error`}
                    />
                    <p id={`${setting.id}-error`} class="text-xs text-rose mt-1 hidden" role="alert"></p>
                  </div>
                )}
                {setting.type === "toggle" && (
                  <label class="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      id={setting.id}
                      class="sr-only peer"
                    />
                    <div class="w-11 h-6 bg-overlay rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-iris peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-iris" />
                  </label>
                )}
              </div>
            </div>
          ))}
        </section>
      ))
    }
    <div class="border-t border-overlay pt-4">
      <p class="text-xs text-text">
        Ping: <span id="ping-result" class="font-mono">Pinging...</span>
      </p>
    </div>
  </div>

  <div
    id="info-tooltip"
    class="bg-overlay absolute z-10 hidden max-w-xs p-2 text-sm rounded-md shadow-lg bg-crust text-text border border-overlay pointer-events-none"
  >
  </div>
</Popup>
<script define:vars={{ settingsConfig: flatSettingsConfig }} defer is:inline>
  const popupContent = document.getElementById("settings-popup-content");
  const tooltip = document.getElementById("info-tooltip");

  // New helper function to validate and display error messages
  function validateSetting(element, setting) {
    const errorElement = document.getElementById(`${setting.id}-error`);
    if (!errorElement || setting.type !== "text" || !setting.regex) {
      // No validation needed for this element or no regex defined
      return true;
    }

    const regex = new RegExp(setting.regex);
    const isValid = regex.test(element.value);

    if (!isValid) {
      errorElement.textContent = setting.validationMessage || "Invalid input.";
      errorElement.classList.remove("hidden");
      element.classList.add("border-rose"); // Add visual error state
      element.setAttribute("aria-invalid", "true");
      return false;
    } else {
      errorElement.classList.add("hidden");
      errorElement.textContent = "";
      element.classList.remove("border-rose"); // Remove visual error state
      element.setAttribute("aria-invalid", "false");
      return true;
    }
  }

  function loadSettings() {
    settingsConfig.forEach((setting) => {
      const element = document.getElementById(setting.id);
      if (!element) return;
      const storedValue = localStorage.getItem(setting.id);
      const valueToApply =
        storedValue !== null ? storedValue : setting.defaultValue;
      if (setting.type === "toggle") {
        element.checked = valueToApply === "true";
      } else {
        element.value = valueToApply;
      }
      // Validate after loading to show any initial errors
      validateSetting(element, setting);
    });
  }

  function saveSettings(event) {
    const element = event.target;
    const setting = settingsConfig.find((s) => s.id === element.id);
    if (!setting) return;

    // Validate before saving. If invalid, prevent saving.
    const isValid = validateSetting(element, setting);
    if (!isValid) {
      return; // Do not save invalid data
    }

    const valueToStore =
      setting.type === "toggle" ? element.checked : element.value;
    localStorage.setItem(setting.id, valueToStore.toString());
  }

  function initializeSettings() {
    loadSettings();
    settingsConfig.forEach((setting) => {
      const element = document.getElementById(setting.id);
      if (element) {
        element.addEventListener("change", saveSettings);
        // For text inputs with regex, add an 'input' listener for real-time validation feedback
        if (setting.type === "text" && setting.regex) {
          element.addEventListener("input", (event) => {
            const currentElement = event.target;
            const currentSetting = settingsConfig.find((s) => s.id === currentElement.id);
            if (currentSetting) {
                validateSetting(currentElement, currentSetting);
            }
          });
        }
      }
    });
  }

  // --- Tooltip Functions ---
  function showTooltip(button) {
    const description = button.dataset.description;
    if (!description || !tooltip) return;

    tooltip.textContent = description;
    tooltip.classList.remove("hidden");

    // --- POSITIONING LOGIC ---
    const buttonRect = button.getBoundingClientRect();
    const contentRect = popupContent.getBoundingClientRect();

    tooltip.style.left = "50%";
    tooltip.style.transform = "translateX(-50%)";

    let top = buttonRect.top - contentRect.top + button.offsetHeight + 8;

    if (top + tooltip.offsetHeight > popupContent.clientHeight) {
      top = buttonRect.top - contentRect.top - tooltip.offsetHeight - 8;
    }

    tooltip.style.top = `${top + popupContent.scrollTop}px`;
  }

  function hideTooltip() {
    if (tooltip && !tooltip.classList.contains("hidden")) {
      tooltip.classList.add("hidden");
    }
  }

  // --- Ping Function (Client-Side) ---
  async function updatePing() {
    const url = location.origin;
    const pingResultEl = document.getElementById("ping-result");
    if (!pingResultEl) return;
    pingResultEl.textContent = "Pinging...";
    const startTime = performance.now();
    try {
      await fetch(url, { mode: "no-cors", cache: "no-store" });
      const endTime = performance.now();
      const duration = Math.round(endTime - startTime);
      pingResultEl.textContent = `${duration}ms`;
    } catch (e) {
      pingResultEl.textContent = "Error";
    }
  }

  document.addEventListener("popup-opened", (event) => {
    if (event.detail.popupId === "settings-popup") {
      // Original code was toggling visibility on #bookmarks. Assuming this is intentional
      // If #bookmarks is not in the DOM, this will throw an error.
      // Make sure document.getElementById("bookmarks") exists or handle null
      const bookmarksElement = document.getElementById("bookmarks");
      if (bookmarksElement) {
        bookmarksElement.classList.toggle("invisible");
      }
      updatePing();
    }
  });
  initializeSettings();
  document.querySelectorAll(".info-btn").forEach((button) => {
    button.addEventListener("mouseenter", () => showTooltip(button));
    button.addEventListener("mouseleave", hideTooltip);
    button.addEventListener("focus", () => showTooltip(button));
    button.addEventListener("blur", hideTooltip);
  });
  popupContent.addEventListener("scroll", hideTooltip, { passive: true });
</script>
